package ui;

import model.Message;
import service.MessageService;
import service.MessageServiceImpl;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class Search {
    private JFrame jFrame;
    private JComboBox typeChoice;
    private JButton searchButton;
    private JPanel searchPanel;
    private JTable listTable;
    private JScrollPane jsp;
    private JPanel listPanel;
    private JButton back;
    private Search search;
    MessageService messageService = new MessageServiceImpl();

    Search() {
        listPanel.setVisible(false);


        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (listTable.getModel() != null) {
                    listPanel.setVisible(false);
                }
                String[][] objects = {};
                String[] titles = {"编号", "姓名", "手机号码", "分组", "邮箱", "QQ号码", "备注"};
                int type = typeChoice.getSelectedIndex();
                DefaultTableModel defaultTableModel = new DefaultTableModel(objects, titles) {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                List<Message> messageList = messageService.getMessageByType(type);
                if (messageList.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "暂无数据！");
                } else {
                    for (Message m : messageList) {
                        defaultTableModel.addRow(new String[]{
                                String.valueOf(m.getId()), m.getName(), m.getPhoneNum(),
                                m.getType().getMessage(), m.getEmail(), m.getQqNum(), m.getRemark()
                        });
                    }
                    listTable.setModel(defaultTableModel);
                    listPanel.setVisible(true);
                }
            }
        });
        back.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                PhoneBook phoneBook = new PhoneBook();
                ShowMenu.show("电话簿主页", phoneBook.getMainPanel());
            }
        });
    }


    public JPanel getSearchPanel() {
        return searchPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        searchPanel = new JPanel();
        searchPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(10, 20, 20, 10), -1, -1));
        typeChoice = new JComboBox();
        Font typeChoiceFont = this.$$$getFont$$$(null, -1, 20, typeChoice.getFont());
        if (typeChoiceFont != null) typeChoice.setFont(typeChoiceFont);
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("办公");
        defaultComboBoxModel1.addElement("个人");
        defaultComboBoxModel1.addElement("商务");
        typeChoice.setModel(defaultComboBoxModel1);
        typeChoice.setToolTipText("办公");
        searchPanel.add(typeChoice, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(318, 40), null, 0, false));
        listPanel = new JPanel();
        listPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        searchPanel.add(listPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        jsp = new JScrollPane();
        Font jspFont = this.$$$getFont$$$(null, -1, 18, jsp.getFont());
        if (jspFont != null) jsp.setFont(jspFont);
        listPanel.add(jsp, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        jsp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
        listTable = new JTable();
        jsp.setViewportView(listTable);
        back = new JButton();
        Font backFont = this.$$$getFont$$$(null, -1, 14, back.getFont());
        if (backFont != null) back.setFont(backFont);
        back.setText("返回主页");
        searchPanel.add(back, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 40), null, 0, false));
        searchButton = new JButton();
        Font searchButtonFont = this.$$$getFont$$$(null, -1, 20, searchButton.getFont());
        if (searchButtonFont != null) searchButton.setFont(searchButtonFont);
        searchButton.setText("查找");
        searchPanel.add(searchButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 40), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return searchPanel;
    }

}
